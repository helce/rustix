From Dan Gohman <dev@sunfishcode.online>
Subject: [PATCH] Implement `TCGETS2` and `TCSETS2`.

This implements the `TCGETS2` and `TCSETS2` ioctls.

diff -ur a/linux-user/ioctls.h b/linux-user/ioctls.h
--- a/linux-user/ioctls.h
+++ b/linux-user/ioctls.h
@@ -1,5 +1,15 @@
      /* emulated ioctl list */
 
+     /*
+      * Put `TCGETS2`/`TCGETS2` before `TCGETS`/`TCSETS` so that on targets
+      * where these have the same value, we find the `TCGETS2`/`TCSETS2`
+      * entries first, which ensures that we set the `c_ispeed` and `c_ospeed`
+      * fields if the target needed them.
+      */
+     IOCTL(TCGETS2, IOC_R, MK_PTR(MK_STRUCT(STRUCT_termios2)))
+     IOCTL(TCSETS2, IOC_W, MK_PTR(MK_STRUCT(STRUCT_termios2)))
+     IOCTL(TCSETSF2, IOC_W, MK_PTR(MK_STRUCT(STRUCT_termios2)))
+     IOCTL(TCSETSW2, IOC_W, MK_PTR(MK_STRUCT(STRUCT_termios2)))
      IOCTL(TCGETS, IOC_R, MK_PTR(MK_STRUCT(STRUCT_termios)))
      IOCTL(TCSETS, IOC_W, MK_PTR(MK_STRUCT(STRUCT_termios)))
      IOCTL(TCSETSF, IOC_W, MK_PTR(MK_STRUCT(STRUCT_termios)))
diff -ur a/linux-user/ppc/termbits.h b/linux-user/ppc/termbits.h
--- a/linux-user/ppc/termbits.h
+++ b/linux-user/ppc/termbits.h
@@ -20,6 +20,17 @@
     target_speed_t c_ospeed;               /* output speed */
 };
 
+struct target_termios2 {
+    target_tcflag_t c_iflag;               /* input mode flags */
+    target_tcflag_t c_oflag;               /* output mode flags */
+    target_tcflag_t c_cflag;               /* control mode flags */
+    target_tcflag_t c_lflag;               /* local mode flags */
+    target_cc_t c_cc[TARGET_NCCS];         /* control characters */
+    target_cc_t c_line;                    /* line discipline */
+    target_speed_t c_ispeed;               /* input speed */
+    target_speed_t c_ospeed;               /* output speed */
+};
+
 /* c_cc character offsets */
 #define TARGET_VINTR 	0
 #define TARGET_VQUIT 	1
@@ -95,6 +106,8 @@
 
 /* c_cflag bit meaning */
 #define TARGET_CBAUD	0000377
+#define TARGET_CIBAUD	077600000
+#define TARGET_IBSHIFT	16
 #define  TARGET_B0	0000000		/* hang up */
 #define  TARGET_B50	0000001
 #define  TARGET_B75	0000002
@@ -129,6 +142,7 @@
 #define TARGET_B3000000  00034
 #define TARGET_B3500000  00035
 #define TARGET_B4000000  00036
+#define TARGET_BOTHER    00037
 
 #define TARGET_CSIZE	00001400
 #define   TARGET_CS5	00000000
@@ -178,6 +192,10 @@
 #define TARGET_TCSETS		TARGET_IOW('t', 20, struct target_termios)
 #define TARGET_TCSETSW		TARGET_IOW('t', 21, struct target_termios)
 #define TARGET_TCSETSF		TARGET_IOW('t', 22, struct target_termios)
+#define TARGET_TCGETS2		TARGET_TCGETS
+#define TARGET_TCSETS2		TARGET_TCSETS
+#define TARGET_TCSETSW2		TARGET_TCSETSW
+#define TARGET_TCSETSF2		TARGET_TCSETSF
 
 #define TARGET_TCGETA		TARGET_IOR('t', 23, struct target_termio)
 #define TARGET_TCSETA		TARGET_IOW('t', 24, struct target_termio)
diff -ur a/linux-user/strace.c b/linux-user/strace.c
--- a/linux-user/strace.c
+++ b/linux-user/strace.c
@@ -1821,13 +1821,16 @@
     }
 
     qemu_log("c_cflag = ");
+    if (cflags & TARGET_CIBAUD) {
+        print_enums(termios_cflags_CBAUD, (cflags & TARGET_CIBAUD) >> TARGET_IBSHIFT, 0);
+    }
     if (cflags & TARGET_CBAUD) {
         print_enums(termios_cflags_CBAUD, cflags & TARGET_CBAUD, 0);
     }
     if (cflags & TARGET_CSIZE) {
         print_enums(termios_cflags_CSIZE, cflags & TARGET_CSIZE, 0);
     }
-    target_tcflag_t cflags_clean = cflags & ~(TARGET_CBAUD | TARGET_CSIZE);
+    target_tcflag_t cflags_clean = cflags & ~(TARGET_CBAUD | TARGET_CIBAUD | TARGET_CSIZE);
     print_flags(termios_cflags, cflags_clean, 0);
 
     qemu_log("c_lflag = ");
@@ -1841,6 +1844,73 @@
 
     qemu_log("}");
 }
+
+void
+print_termios2(void *arg)
+{
+    const struct target_termios2 *target = arg;
+
+    target_tcflag_t iflags = tswap32(target->c_iflag);
+    target_tcflag_t oflags = tswap32(target->c_oflag);
+    target_tcflag_t cflags = tswap32(target->c_cflag);
+    target_tcflag_t lflags = tswap32(target->c_lflag);
+
+    qemu_log("{");
+
+    qemu_log("c_iflag = ");
+    print_flags(termios_iflags, iflags, 0);
+
+    qemu_log("c_oflag = ");
+    target_tcflag_t oflags_clean =  oflags & ~(TARGET_NLDLY | TARGET_CRDLY |
+                                               TARGET_TABDLY | TARGET_BSDLY |
+                                               TARGET_VTDLY | TARGET_FFDLY);
+    print_flags(termios_oflags, oflags_clean, 0);
+    if (oflags & TARGET_NLDLY) {
+        print_enums(termios_oflags_NLDLY, oflags & TARGET_NLDLY, 0);
+    }
+    if (oflags & TARGET_CRDLY) {
+        print_enums(termios_oflags_CRDLY, oflags & TARGET_CRDLY, 0);
+    }
+    if (oflags & TARGET_TABDLY) {
+        print_enums(termios_oflags_TABDLY, oflags & TARGET_TABDLY, 0);
+    }
+    if (oflags & TARGET_BSDLY) {
+        print_enums(termios_oflags_BSDLY, oflags & TARGET_BSDLY, 0);
+    }
+    if (oflags & TARGET_VTDLY) {
+        print_enums(termios_oflags_VTDLY, oflags & TARGET_VTDLY, 0);
+    }
+    if (oflags & TARGET_FFDLY) {
+        print_enums(termios_oflags_FFDLY, oflags & TARGET_FFDLY, 0);
+    }
+
+    qemu_log("c_cflag = ");
+    if (cflags & TARGET_CIBAUD) {
+        print_enums(termios_cflags_CBAUD, (cflags & TARGET_CIBAUD) >> TARGET_IBSHIFT, 0);
+    }
+    if (cflags & TARGET_CBAUD) {
+        print_enums(termios_cflags_CBAUD, cflags & TARGET_CBAUD, 0);
+    }
+    if (cflags & TARGET_CSIZE) {
+        print_enums(termios_cflags_CSIZE, cflags & TARGET_CSIZE, 0);
+    }
+    target_tcflag_t cflags_clean = cflags & ~(TARGET_CBAUD | TARGET_CIBAUD | TARGET_CSIZE);
+    print_flags(termios_cflags, cflags_clean, 0);
+
+    qemu_log("c_lflag = ");
+    print_flags(termios_lflags, lflags, 0);
+
+    qemu_log("c_cc = ");
+    qemu_log("\"%s\",", target->c_cc);
+
+    qemu_log("c_line = ");
+    print_raw_param("\'%c\'", target->c_line, 0);
+
+    print_raw_param("c_ispeed = %" PRIu32, tswap64(target->c_ispeed), 0);
+    print_raw_param("c_ospeed = %" PRIu32, tswap64(target->c_ospeed), 1);
+
+    qemu_log("}");
+}
 
 #undef UNUSED
 
@@ -4161,7 +4161,7 @@
     int target_size;
 
     for (ie = ioctl_entries; ie->target_cmd != 0; ie++) {
-        if (ie->target_cmd == arg1) {
+        if (ie->target_cmd == (int)arg1) {
             break;
         }
     }
diff -ur a/linux-user/syscall.c b/linux-user/syscall.c
--- a/linux-user/syscall.c
+++ b/linux-user/syscall.c
@@ -84,6 +84,7 @@
 #endif
 
 #define termios host_termios
+#define termios2 host_termios2
 #define winsize host_winsize
 #define termio host_termio
 #define sgttyb host_sgttyb /* same as target */
@@ -5871,6 +5872,28 @@
 	{ TARGET_CBAUD, TARGET_B115200, CBAUD, B115200 },
 	{ TARGET_CBAUD, TARGET_B230400, CBAUD, B230400 },
 	{ TARGET_CBAUD, TARGET_B460800, CBAUD, B460800 },
+	{ TARGET_CBAUD, TARGET_BOTHER, CBAUD, BOTHER },
+	{ TARGET_CIBAUD, TARGET_B0 << TARGET_IBSHIFT, CIBAUD, B0 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B50 << TARGET_IBSHIFT, CIBAUD, B50 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B75 << TARGET_IBSHIFT, CIBAUD, B75 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B110 << TARGET_IBSHIFT, CIBAUD, B110 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B134 << TARGET_IBSHIFT, CIBAUD, B134 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B150 << TARGET_IBSHIFT, CIBAUD, B150 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B200 << TARGET_IBSHIFT, CIBAUD, B200 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B300 << TARGET_IBSHIFT, CIBAUD, B300 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B600 << TARGET_IBSHIFT, CIBAUD, B600 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B1200 << TARGET_IBSHIFT, CIBAUD, B1200 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B1800 << TARGET_IBSHIFT, CIBAUD, B1800 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B2400 << TARGET_IBSHIFT, CIBAUD, B2400 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B4800 << TARGET_IBSHIFT, CIBAUD, B4800 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B9600 << TARGET_IBSHIFT, CIBAUD, B9600 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B19200 << TARGET_IBSHIFT, CIBAUD, B19200 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B38400 << TARGET_IBSHIFT, CIBAUD, B38400 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B57600 << TARGET_IBSHIFT, CIBAUD, B57600 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B115200 << TARGET_IBSHIFT, CIBAUD, B115200 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B230400 << TARGET_IBSHIFT, CIBAUD, B230400 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_B460800 << TARGET_IBSHIFT, CIBAUD, B460800 << IBSHIFT },
+	{ TARGET_CIBAUD, TARGET_BOTHER << TARGET_IBSHIFT, CIBAUD, BOTHER << IBSHIFT },
 	{ TARGET_CSIZE, TARGET_CS5, CSIZE, CS5 },
 	{ TARGET_CSIZE, TARGET_CS6, CSIZE, CS6 },
 	{ TARGET_CSIZE, TARGET_CS7, CSIZE, CS7 },
@@ -5938,6 +5961,43 @@
     host->c_cc[VEOL2] = target->c_cc[TARGET_VEOL2];
 }
 
+static void target_to_host_termios2 (void *dst, const void *src)
+{
+    struct host_termios2 *host = dst;
+    const struct target_termios2 *target = src;
+
+    host->c_iflag =
+        target_to_host_bitmask(tswap32(target->c_iflag), iflag_tbl);
+    host->c_oflag =
+        target_to_host_bitmask(tswap32(target->c_oflag), oflag_tbl);
+    host->c_cflag =
+        target_to_host_bitmask(tswap32(target->c_cflag), cflag_tbl);
+    host->c_lflag =
+        target_to_host_bitmask(tswap32(target->c_lflag), lflag_tbl);
+    host->c_line = target->c_line;
+
+    memset(host->c_cc, 0, sizeof(host->c_cc));
+    host->c_cc[VINTR] = target->c_cc[TARGET_VINTR];
+    host->c_cc[VQUIT] = target->c_cc[TARGET_VQUIT];
+    host->c_cc[VERASE] = target->c_cc[TARGET_VERASE];
+    host->c_cc[VKILL] = target->c_cc[TARGET_VKILL];
+    host->c_cc[VEOF] = target->c_cc[TARGET_VEOF];
+    host->c_cc[VTIME] = target->c_cc[TARGET_VTIME];
+    host->c_cc[VMIN] = target->c_cc[TARGET_VMIN];
+    host->c_cc[VSWTC] = target->c_cc[TARGET_VSWTC];
+    host->c_cc[VSTART] = target->c_cc[TARGET_VSTART];
+    host->c_cc[VSTOP] = target->c_cc[TARGET_VSTOP];
+    host->c_cc[VSUSP] = target->c_cc[TARGET_VSUSP];
+    host->c_cc[VEOL] = target->c_cc[TARGET_VEOL];
+    host->c_cc[VREPRINT] = target->c_cc[TARGET_VREPRINT];
+    host->c_cc[VDISCARD] = target->c_cc[TARGET_VDISCARD];
+    host->c_cc[VWERASE] = target->c_cc[TARGET_VWERASE];
+    host->c_cc[VLNEXT] = target->c_cc[TARGET_VLNEXT];
+    host->c_cc[VEOL2] = target->c_cc[TARGET_VEOL2];
+    host->c_ispeed = tswap32(target->c_ispeed);
+    host->c_ospeed = tswap32(target->c_ospeed);
+}
+
 static void host_to_target_termios (void *dst, const void *src)
 {
     struct target_termios *target = dst;
@@ -5971,6 +6031,50 @@
     target->c_cc[TARGET_VWERASE] = host->c_cc[VWERASE];
     target->c_cc[TARGET_VLNEXT] = host->c_cc[VLNEXT];
     target->c_cc[TARGET_VEOL2] = host->c_cc[VEOL2];
+#if defined(TARGET_PPC) || defined(TARGET_PPC64)
+    // On PowerPC, `termios` is an alias for `termios2`, so it has the
+    // `c_ispeed` and `c_ospeed` fields. Our host may not have those fields
+    // though, so just set them to zero so that they're not uninitialized.
+    target->c_ispeed = 0;
+    target->c_ospeed = 0;
+#endif
+}
+
+static void host_to_target_termios2 (void *dst, const void *src)
+{
+    struct target_termios2 *target = dst;
+    const struct host_termios2 *host = src;
+
+    target->c_iflag =
+        tswap32(host_to_target_bitmask(host->c_iflag, iflag_tbl));
+    target->c_oflag =
+        tswap32(host_to_target_bitmask(host->c_oflag, oflag_tbl));
+    target->c_cflag =
+        tswap32(host_to_target_bitmask(host->c_cflag, cflag_tbl));
+    target->c_lflag =
+        tswap32(host_to_target_bitmask(host->c_lflag, lflag_tbl));
+    target->c_line = host->c_line;
+
+    memset(target->c_cc, 0, sizeof(target->c_cc));
+    target->c_cc[TARGET_VINTR] = host->c_cc[VINTR];
+    target->c_cc[TARGET_VQUIT] = host->c_cc[VQUIT];
+    target->c_cc[TARGET_VERASE] = host->c_cc[VERASE];
+    target->c_cc[TARGET_VKILL] = host->c_cc[VKILL];
+    target->c_cc[TARGET_VEOF] = host->c_cc[VEOF];
+    target->c_cc[TARGET_VTIME] = host->c_cc[VTIME];
+    target->c_cc[TARGET_VMIN] = host->c_cc[VMIN];
+    target->c_cc[TARGET_VSWTC] = host->c_cc[VSWTC];
+    target->c_cc[TARGET_VSTART] = host->c_cc[VSTART];
+    target->c_cc[TARGET_VSTOP] = host->c_cc[VSTOP];
+    target->c_cc[TARGET_VSUSP] = host->c_cc[VSUSP];
+    target->c_cc[TARGET_VEOL] = host->c_cc[VEOL];
+    target->c_cc[TARGET_VREPRINT] = host->c_cc[VREPRINT];
+    target->c_cc[TARGET_VDISCARD] = host->c_cc[VDISCARD];
+    target->c_cc[TARGET_VWERASE] = host->c_cc[VWERASE];
+    target->c_cc[TARGET_VLNEXT] = host->c_cc[VLNEXT];
+    target->c_cc[TARGET_VEOL2] = host->c_cc[VEOL2];
+    target->c_ispeed = tswap32(host->c_ispeed);
+    target->c_ospeed = tswap32(host->c_ospeed);
 }
 
 static const StructEntry struct_termios_def = {
@@ -5980,6 +6084,13 @@
     .print = print_termios,
 };
 
+static const StructEntry struct_termios2_def = {
+    .convert = { host_to_target_termios2, target_to_host_termios2 },
+    .size = { sizeof(struct target_termios2), sizeof(struct host_termios2) },
+    .align = { __alignof__(struct target_termios2), __alignof__(struct host_termios2) },
+    .print = print_termios2,
+};
+
 /* If the host does not provide these bits, they may be safely discarded. */
 #ifndef MAP_SYNC
 #define MAP_SYNC 0
diff -ur a/linux-user/syscall_types.h b/linux-user/syscall_types.h
--- a/linux-user/syscall_types.h
+++ b/linux-user/syscall_types.h
@@ -1,4 +1,5 @@
 STRUCT_SPECIAL(termios)
+STRUCT_SPECIAL(termios2)
 
 STRUCT(winsize,
        TYPE_SHORT, TYPE_SHORT, TYPE_SHORT, TYPE_SHORT)
diff -ur a/linux-user/user-internals.h b/linux-user/user-internals.h
--- a/linux-user/user-internals.h
+++ b/linux-user/user-internals.h
@@ -131,6 +131,7 @@
 #endif /* TARGET_ABI_BITS != 32 */
 
 void print_termios(void *arg);
+void print_termios2(void *arg);
 
 /* ARM EABI and MIPS expect 64bit types aligned even on pairs or registers */
 #ifdef TARGET_ARM
diff -ur -x build -x roms a/linux-user/mips/termbits.h b/linux-user/mips/termbits.h
--- a/linux-user/mips/termbits.h
+++ b/linux-user/mips/termbits.h
@@ -18,6 +18,17 @@
     target_cc_t c_cc[TARGET_NCCS];         /* control characters */
 };
 
+struct target_termios2 {
+    target_tcflag_t c_iflag;               /* input mode flags */
+    target_tcflag_t c_oflag;               /* output mode flags */
+    target_tcflag_t c_cflag;               /* control mode flags */
+    target_tcflag_t c_lflag;               /* local mode flags */
+    target_cc_t c_line;                    /* line discipline */
+    target_cc_t c_cc[TARGET_NCCS];         /* control characters */
+    target_speed_t c_ispeed;               /* input speed */
+    target_speed_t c_ospeed;               /* output speed */
+};
+
 /* c_iflag bits */
 #define TARGET_IGNBRK  0000001
 #define TARGET_BRKINT  0000002
@@ -117,6 +128,7 @@
 #define  TARGET_B3500000 0010016
 #define  TARGET_B4000000 0010017
 #define TARGET_CIBAUD    002003600000  /* input baud rate (not used) */
+#define TARGET_IBSHIFT 16
 #define TARGET_CMSPAR    010000000000  /* mark or space (stick) parity */
 #define TARGET_CRTSCTS   020000000000  /* flow control */
 
@@ -217,9 +229,9 @@
 #define TARGET_TIOCSETP        0x7409
 #define TARGET_TIOCSETN        0x740a			/* TIOCSETP wo flush */
 
-/* #define TARGET_TIOCSETA	TARGET_IOW('t', 20, struct termios) set termios struct */
-/* #define TARGET_TIOCSETAW	TARGET_IOW('t', 21, struct termios) drain output, set */
-/* #define TARGET_TIOCSETAF	TARGET_IOW('t', 22, struct termios) drn out, fls in, set */
+/* #define TARGET_TIOCSETA	TARGET_IOW('t', 20, struct target_termios) set termios struct */
+/* #define TARGET_TIOCSETAW	TARGET_IOW('t', 21, struct target_termios) drain output, set */
+/* #define TARGET_TIOCSETAF	TARGET_IOW('t', 22, struct target_termios) drn out, fls in, set */
 /* #define TARGET_TIOCGETD	TARGET_IOR('t', 26, int)	get line discipline */
 /* #define TARGET_TIOCSETD	TARGET_IOW('t', 27, int)	set line discipline */
 						/* 127-124 compat */
@@ -227,10 +239,10 @@
 #define TARGET_TIOCSBRK	0x5427  /* BSD compatibility */
 #define TARGET_TIOCCBRK	0x5428  /* BSD compatibility */
 #define TARGET_TIOCGSID	0x7416  /* Return the session ID of FD */
-#define TARGET_TCGETS2          TARGET_IOR('T', 0x2A, struct termios2)
-#define TARGET_TCSETS2          TARGET_IOW('T', 0x2B, struct termios2)
-#define TARGET_TCSETSW2         TARGET_IOW('T', 0x2C, struct termios2)
-#define TARGET_TCSETSF2         TARGET_IOW('T', 0x2D, struct termios2)
+#define TARGET_TCGETS2          TARGET_IOR('T', 0x2A, struct target_termios2)
+#define TARGET_TCSETS2          TARGET_IOW('T', 0x2B, struct target_termios2)
+#define TARGET_TCSETSW2         TARGET_IOW('T', 0x2C, struct target_termios2)
+#define TARGET_TCSETSF2         TARGET_IOW('T', 0x2D, struct target_termios2)
 #define TARGET_TIOCGRS485       TARGET_IOR('T', 0x2E, struct serial_rs485)
 #define TARGET_TIOCSRS485       TARGET_IOWR('T', 0x2F, struct serial_rs485)
 #define TARGET_TIOCGPTN	TARGET_IOR('T',0x30, unsigned int) /* Get Pty Number (of pty-mux device) */
